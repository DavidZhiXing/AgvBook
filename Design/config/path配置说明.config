### 基本结构

``` xml
<Paths Version="2.0.0">
	<Path No="1" Detail="B;54.628,11.260,0.000;54.628,12.260,0.000" />
    <Path No="2" Detail="B;54.628,12.260,0.000;54.628,16.260,0.000" />
    <Path No="3" Detail="B;54.628,16.260,0.000;54.628,19.260,0.000" />
	<Path No="4" Detail="F;54.628,19.260,0.000;54.628,22.260,0.000" />
</Paths>
```
### 所有xml的结构
- 跟节点（root) 这里是Paths，
- Paths下的节点（Path） ，编写在由<Paths>开始，</Paths>结束之间的节点，所有节点可以简写为 <节点名 />, 这里字节点为Path，
- Path 具有一些特性
    - No：路径编号，从1开始，每个路径都有一个唯一的编号，
    - Detail: 路径的详细信息，格式为：路径方向;起点X，起点Y，起点Theta(角度）；终点X，终点Y，终点Theta(角度）；
        - B: 表示backward, 向后，即表示朝车头相反的方向前进
        - F: 表示forward, 向前，即表示朝车头方向前进
        - Theta: 角度，单位为弧度，0表示直线，正数表示顺时针弧线运行，负数表示逆时针弧线运行（待确认）

### 辅助工具

了解规则之后，我们就可以手动构造简单路径了；
但是要绘制整个地图还是比较麻烦，也需要比较专业的知识，所以我们开发了[施工助手]，绘制地图之后可以导出path.config, 可以直接使用；

### 扩充
Detail进行了扩充, 新版格式为：路径方向; 路径类型, 起点X, 起点Y, 起点Theta; 终点X, 终点Y, 终点Theta;
``` xml
	<Path No="1" Detail="B;1,54.628,11.260,0.000;1,54.628,12.260,0.000" />
```
- 路径类型：
``` c#
    public enum SegmentKind : int
    {
        /// <summary>
        /// 未定义
        /// </summary>
        Undefined = 0,

        /// <summary>
        /// 直线
        /// </summary>
        Line = 1,

        /// <summary>
        /// 圆弧
        /// </summary>
        Arc = 2,

        /// <summary>
        /// 3阶Hermite样条
        /// </summary>
        HermiteSpede = 3,

        /// <summary>
        /// 3阶B样条
        /// </summary>
        BSpede = 4,

        /// <summary>
        /// 横移
        /// </summary>
        Shift = 5,
    }
```
- theta: 角度制，取值范围 -180~180

新路径的使用：全向车项目

### 设计
- 路径的解析，可以使用[PathParser]，可以解析xml的路径信息，解析出路径的点信息；
- 路径的下发，与控制模块对接
- 路径的绘制，地图显示
- 脱轨检测
- 路径导航，自适应操作
- 路径的运算

### 源码参考：
- Agv.Common.Paths
- Agv.Common.Geometry